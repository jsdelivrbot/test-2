General:

# Sprint and support URL
   * https://jira.mtvi.com

# PMT Configurations: 
 * http://media.mtvnservices.com

# Frank Rubeno: 732 308 3519 (structural engineer)

# Paragon Associates - Structural Engineer
 (732) 698-04800


#Kums’s iPhone 6 device id:
 UUID:  352b10af242d62adc01ba443f681d6f2edd924ea

————————————————————————————————————————————————————————————————————————————————



www.viacomw2.com

W2:
http://www.w2express.com/
employer code: 14642
userid: vin
pass: vinu

vpn / rsa
https://lawebvpn.viacom.com/+CSCOE+/portal.html
regularly: webvpn.viacom.com
pass: vinu + rsa passcode

Kim (wells fargo financials) - 732 245 9945

User / Password:
# https://mtvn.webex.com/
# Budget Code: 13021144
# Joyce iPad - 2588
# Voice Mail pin: vinu79
# Wireless / wifi : viaNYwirelessWPA

#401k
 * INVESCO Stable Value - 0.41%
 * JPMCB SmartRetirement 2040-C - 0.86%
 * Vanguard FTSE Social Index-Inst - 0.16%
 * Dodge & Cox Value Equity - 0.37%
 * Capital Group Emerging Markets Equity Trust-S - 1.10%

# Viacom Mandatory courses
  * https://viacom-lcec.lrn.com/app/mlp 
  * userid: 4035693
 * pass: Tough extended casual

# Kums VIN no: 4035693

# WebMD 
 * Registration ID: What is my Registration ID?19744705101977KUMARAN
 * https://www.webmdhealth.com/viacomhealth/main/HomePage.aspx
 * userid: per
 * pass: tough extended casual

# WageWorks
 * https://participant.wageworks.com/Account/Profile/ContactInformation.aspx
 * userid: per
 * pass: tough extended casual

# https://www.virginhealthmiles.com
* userid: per-g
* pass: tough extended casual
* You have successfully joined Virgin Pulse! Your HealthMiles Member ID is: SUBRAK0007

#Viacom 
 * Login:subramak
 * Pass:tough extended plus casual

#Viacom - ldap
 * Login:subramku
 * Pass:tough extended casual

To reset:  https://hosting.mtvi.com/

# Charles Registration
 * Registered Name: MTV Networks 
 * Licence Key: 6e172956478bb0c805

# Optimum tv provider
 * username/pwd : research48/support48 

# Screen sharing iOS: https://deals.cultofmac.com/users/1080260/purchases?open=purchase-1414821-1408634
 * X-Mirage
 * License Code: 3e2f5a11371753de4a092915c0e26a5fe2bde258
 * Registration Name: Kumaran Subramanian
 * per-g

# Adobe Account:
URL:  my.omniture.com
company: mtv
 login: skums
 pass: tough extended casual

#twitter: btgreporting
pw: viacom123test

#facebook:
joyce.chiang@viacom.com
viacom123

#Apple developer account
userid: kumaran.subramanian@viacom.com
passs: tough extended casual
recovert: per-g
————————————————————————————————————————————————————————————————————————————————
Contacts:
# TV Land iOS App developer: Daniel Kwok 
  * TV Land and Spike uses same Bento reporting 
# Tech connect: 4040 : Juan (floor in charge)

#  Nick iOS app -  Contacts: Rob Ruffler / Anita Anderson
————————————————————————————————————————————————————————————————————————————————
MAC:

# To show hidden files in mac
 * defaults write com.apple.finder AppleShowAllFiles YES
 * and then alt right click finder and relaunch

# To hide hidden files in mac
 * defaults write com.apple.finder AppleShowAllFiles NO 

# To write write protect vi files - vi editor - .bash_profile - maven
 * :w !sudo tee %

————————————————————————————————————————————————————————————————————————————————
QA Testing:

# To get QA testing stuffs
 * svn:  svn checkout https://subversion.1515.mtvi.com/phpsites/platform/btg.mtvnservices.com/trunk/qa/ qa 
  ldap/pass
————————————————————————————————————————————————————————————————————————————————
Omniture Call: 

  * http://viamtv.112.2o7.net/b/ss/viamtv/0/FAS-3.5.4-AS3  (Flash Player call)
  * http://viamtv.112.2o7.net/b/ss/viamtv/1/JS-1.3  (Javascript call)
  * http://sc.cc.com/b/ss/viacomedycentral/1/JS-1.3/ (Javascript Call :: FirstVisitor cookies)
  * http://sc.cc.com/b/ss/viacomedycentral/0/FAS-3.5.4-AS3 (Flash Player Call :: FirstVisitor cookies)
  * http://sc.cc.com/b/ss/viacomedycentral/1/H.25.5 (Page Reporting including search terms)  
  * http://sc.mtv.com/b/ss/viarnd/0/OIP-3.3.2  (iOS page and link reporting) 

 * events = event16 - page view call
 * Omniture test rig values: https://raw.githubusercontent.com/rgr-myrg/pub/master/json/omni-trackpage.js
 * https://rawgit.com/kumsviacom/kumstest/master/ADMS-Trackpage.js
 * Local testrig: http://localhost:8881/IOS-TestRig/ADMS-Trackpage.js

  * On each page or each app view this is called: onTrackPageView
 * On each link click call: onTrackLink

———————————————————————————————————————————————————————————————————————————————— 
Demdex / AAM Call:
 
 * mtvn.demdex.net
 * Adobe Audience Manager, previously known as Demdex

#  Adobe Audience Manager - earlier called Demdex
 *    Limit Ad Tracking" option is turned ON in Settings -> Privacy -> Advertising, Opt out http fired from AppLaunch/AppResume
 *  Advertising Id is transmitted as the d_dpuuid parameter in the request.
 *   When COPPA Compliance is enabled in VMNConfigSettings:
	•	The Advertising Identifier is not retrieved from Apple Services.
	•	If an Advertising Identifier exists in local storage, it is also cleared.
	•	AAM Segments are cleared from local storage.
	•	AAM Data Collection calls are disabled.
———————————————————————————————————————————————————————————————————————————————— 
Comscore Call:

 *  http://b.scorecardresearch.com

———————————————————————————————————————————————————————————————————————————————— 
 Freewheel Call: 
 (All video ads goes here html5/as3)
 * http://140cc.v.fwmrm.net/ad/p/1

———————————————————————————————————————————————————————————————————————————————— 
Cocoapods:

 - Dependency Management tool for Objective-C

1. Dependency - Rubygems
 * sudo gem update --system

2. Install cocoapods 
* sudo gem install cocoapods  /  sudo gem install cocoapods --user-install

2.a. sudo gem uninstall cocoapods
   sudo gem install -v 0.32.1
 
3.  Setup
 * pod setup

4. Installing dependencies (this will create Podfile)
 * pod init

5. To edit pod file
 * open -a xcode Podfile	

6. To install dependencies
 * pod install

7. To clean cocoa pods
 * sudo rm -rf ~/.cocoapods

8. Download and point cocoapods specs from github
 * mtvn-player/Specs

9. Manually copy the content of Specs local folder to 
 * HOME/.cocoapods/repos/master/Specs/ 
   OR
 * add viacom specs repo -> pod repo add VMN-Specs

# git clone --mirror origin-url: every last one of those refs will be copied as-is. You'll get all the tags, local branches master (HEAD), next, pu, and maint, remote branches devA/master and devB/master, other refs refs/foo/bar and refs/foo/baz. Everything is exactly as it was in the cloned remote. Remote tracking is set up so that if you run git remote update all refs will be overwritten from origin, as if you'd just deleted the mirror and recloned it. As the docs originally said, it's a mirror. It's supposed to be a functionally identical copy, interchangeable with the original.
 
# Make a bare clone of the repository
$ git clone --mirror https://github.com/NickMobile/nick.git

# cd TestRepo.git
$ git push --mirror https://github.com/mtvn-player/Bento-nick-iOS.git
# Mirror-push to the new repository

$ cd ..
rm -rf nick.git
# Remove our temporary local repository
———————————————————————————————————————————————————————————————————————————————— 
iOS:

# Reflection
 https://developer.apple.com/library/mac/documentation/Cocoa/Reference/Foundation/Protocols/NSKeyValueCoding_Protocol/Reference/Reference.html#//apple_ref/occ/instm/NSObject/setValuesForKeysWithDictionary:

# iOS provisioning
 * http://www.bignerdranch.com/we-teach/how-to-prepare/ios-device-provisioning.html
 * provisioned: NickApp_beta, Team2_InHouse

https://s3.amazonaws.com/mobileapps-pipeline-ota/ios/Bento-nick-iOS/3/Team2.mobileprovision
https://s3.amazonaws.com/mobileapps-pipeline-ota/ios/Bento-nick-iOS/3/ADHoc_Default.mobileprovision
https://s3.amazonaws.com/mobileapps-pipeline-ota/ios/Bento-nick-iOS/3/MTVN_Dist_Provision_2013.mobil...


# AFNetworking - iOS library  
* Handling all network related calls and supports JSON, XML, plist
* Latest version 2.0 and above supports NSURLSession (preferred way)

———————————————————————————————————————————————————————————————————————————————— 
Bento iOS: 

# Setup
1. Download the source from github
 * Bento-iOS-Lib

2. Run cocoa pods  (install cocoapods)
 * pod install

3. Open Xcode workspace
 * VMNSampleApp.xcworkspace 

# cocoapods version 0.33.1


NOTE:
 * Sample IOS app has only the player lib and it does't include Bento
 * We need to build Bento and include that in Player and then include the player in the Sample app

# Repo
 Bento: https://github.com/mtvn-player/Bento-iOS-Lib.git
 Ad Component: https://github.com/mtvn-player/VMNAdComponent-iOS-Lib.git
 Bento Test Rig: https://github.com/mtvn-player/Bento-iOS-Test-Rig.git
 Video Player Code: https://github.com/mtvn-player/VMNVideoPlayer-iOS-SDK.git
 Video Player framework: https://github.com/mtvn-player/VMNVideoPlayer-iOS.git
 Video Player Sample App: https://github.com/mtvn-player/VMNVideoPlayer-iOS-Sample.git

# From Aria service - VMNEVENT_UUID_READY - fetch UUID using NSURLConnection or from KeyChain
   isCoppaComplaint = YES —> clear UUID from KeyChain.

———————————————————————————————————————————————————————————————————————————————— 
Bento iOS TestRig:

*Ad config url:  https://raw.githubusercontent.com/antalav/BentoMobile/master/src/iOS/Ads/test_config.js

* cocoa pods 0.34.4 works fine

———————————————————————————————————————————————————————————————————————————————— 
Nick iOS App:

 * Contacts: Rob Ruffler / Anita Anderson
 * Nick iOS app: https://github.com/NickMobile/nick
 * Podspec: https://github.com/NickMobile/InternalSpecs
 * Nick Jenkins Job: http://hudson.mtvi.com/hudson/view/nick-ios/job/nick-ios-xcode6-adhoc/

# https://github.com/mtvn-player/Bento-nick-iOS
 * https://github.com/mtvn-player/Bento-nick-iOS/tree/feature/xcode6/dev/chromecast

#Jenkins job: http://hudson.mtvi.com/hudson/view/BTG/job/Bento-Nick-iOS/

# Tips
 * Need to use cocoapods 0.32.1 for nick, then Xcode 6 also will work.
 * If Not working change the folder name 
 * Delete the pods directory and run pod install
 * Delete Organizer cache
 *  Restart simulator and Xcode, otherwise try restarting the mac

# Make a bare clone of the repository
$ git clone --mirror https://github.com/NickMobile/nick.git

# cd TestRepo.git
$ git push --mirror https://github.com/mtvn-player/Bento-nick-iOS.git
# Mirror-push to the new repository

$ cd ..
rm -rf nick.git
# Remove our temporary local repository

———————————————————————————————————————————————————————————————————————————————— 
MTV iOS App:

#  https://github.com/mtvn-player/Bento-MTVX-iOS
  * https://github.com/mtvn-player/Bento-MTVX-iOS/tree/feature/nielsen-release-withoptout

# Jenkins Job: http://hudson.mtvi.com/hudson/view/BTG/job/Bento-MTVX-iOS/

# Builds good in cocoapods 0.34.4

———————————————————————————————————————————————————————————————————————————————— 
Bento AS3: 

# Setup:
1. Download and install Flash Player 4.5
2. Download and install Github, and download the source
    *Bento-ActionScript-Lib
    *Player-Prime
3. Download and install Charles
4. Download and install MAMP
    * Change the port to 8881 (this may have conflict with SOS max)
5. Download and install SOS max
6. To test the player locally
   * localhost:8881/qa/mediaplayer/index.php
7. To test the player live
   * http://btg.mtvnservices.com/qa/mediaplayer/index.php
8. For maven copy settings.xml to .m2 folder   (change the userid/password)
9. Maven build:
    Create a build: mvn clean package 
    install to .m2 folder: mvn clean install   
10. To get sos max logging  type “btg” not he test player
11. To get the version of the player: primev

# Bento AS3 Player test Local URL
  * http://localhost:8881/qa/mediaplayer/index.php

# Bento AS3 Player test Live URL
 * http://btg.mtvnservices.com/qa/mediaplayer/index.php

# To build BENTO-AS3-LIB Project : JENKINS
 * Create a newItem by cloning 
 * in execute cell delete Command
 * Make sure Goals are "clean package"
 * Branchs to build : branch specifier : origin/BTGREPGEN-4096

# Git Source
  * Player: mtvn-player/Player-Prime
  * Bento: stash: bento-as3 

Project Setup:
 # Player-Prime: 
    * Source Path: src/main/resources
                         src/main/templates
    * Library path: libs
    * Main source folder: src/main/as3
    * Output folder: bin-debug

 # Bento-ActionScript-Lib:
  * Source path: src/main/templates
  * Library path: libs
  * Main source folder: src/main/flex
  * Output folder: /Users/subramak/Projects/ActionScriptWork/Player-Prime/libs	
———————————————————————————————————————————————————————————————————————————————— 
Coda: 

#Setup
1. Install Eclipse
2. Install m2eclipse plugin (Maven 2)
3. Maven 
 * Copy the 20.zip file contents to .m2\repository\com\mtvi\master-jdk14
 * Run mvn clean package
 * Run mvn eclipse:eclipse and then import project (not maven project)
4. Error in pom.xml
 *  NOT REQUIRED:  [ Goto /Users/mac/.m2/repository/com/mtvi/master/20/master-20.pom     -->  modify the line no:40 and replace 2.3 by 2.5     ]
 * NOT REQUIRED:  add the u=inclosing tag <pluginManagement> for <plugins>  /  <lifecycleMappingMetadata>  - to work properly in m2e (eclipse)
5. Testing Coda
 * Appending all the files under the folder starting from Coda.js and all the files in that folder (include only Ads_DFP.js or Ads.js)
   /Users/mac/Projects/JavaScriptWorkspace/Coda/target/classes/3.16-SNAPSHOT.${BUILD_NUMBER}
 6. To concatenate multiple js files :
 * cat *.js > output.js  (takes longer and not working properly)
 * cat CODA.js ABTest.js QuantCast.js Ads_DFP.js Flux.js Recommendations.js Bridge.js FreeWheel.js Reporting.js ChoiceStream.js Gemius.js Rubicon.js ComScore.js Loaded.js TestAndTarget.js Criteo.js Meteor.js Demdex.js Photos.js > Output_Merged_Coda.js
7. Sites like CC.com uses coda from Aria (http://btg.mtvnservices.com/aria/coda.html?site=cc.com&Ads_DFP=1&Ads=0)
  * Sites like mtv.com uses coda directly on their web pages.
8. Websites:
 * http://www.afterellen.com/
 * http://www.thebacklot.com/
 * mtv.com
 * nick.com
 * nickjr.com
 * cc.com
 * vh1.com
9. End of coda line search for : btg.isCoreLoaded  or btg.Events.CORE_LOADED.fire();
10. wro - web resources optimizer

# /Users/mac/Projects/JavaScriptWorkspace/Coda
# /Users/mac/Projects/JavaScriptWorkspace/Coda/target/classes/3.17-SNAPSHOT.\$\{BUILD_NUMBER\}/

# Goto BTG jobs
# To build CODA Project : 
 * Create a newItem by cloning CODAGITHUB
 * in execute cell delete Command
 * Make sure Goals are "clean package"
 * Branches to build : branch specifier : origin/BTGREPGEN-2716

# Coda url for sites: http://btg.mtvnservices.com/aria/coda.html?site=mtv.com

# To beautify the ugly javascript code: http://jsbeautifier.org/

# To search for javascript function definition in chrome: Cmd + opt + F
  * http://stackoverflow.com/questions/9828876/find-javascript-function-definition-in-chrome
 * search for foo\s*=\s*function (searches for foo = function with any number of spaces between those three tokens

#  svn: https://subversion.1515.mtvi.com/phpsites/platform/btg.mtvnservices.com/trunk/CODA/builds

———————————————————————————————————————————————————————————————————————————————— 
# Adding CODA Profile
  1. Php tool which updates the configuration details to the DB
 * http://biztech.mtvn.com/tools/btg/domains_manager.php

 2. Jenkins tool which make the build and move it to Dev server
 * Run the Job: Coda 3 Configs (Stagging and Live)
 * Run the job twice
   First Run: 
   1. FROM_QUEUE - CHECKED
   2. BUILD_TO_STAGING - UNCHECKED
   3. FORCE_TO_REVISON - EMPTY
   Second Run:	
   1. FROM_QUEUE - CHECKED
   2. BUILD_TO_STAGING - CHECKED
   3. FORCE_TO_REVISON - EMPTY   

 * After it runs it puts in (not sure):  https://subversion.1515.mtvi.com/phpsites/platform/btg.mtvnservices.com/trunk/CODA/sites
 3. Green and Purple tool which moves the Coda config from Dev to QA server
 * https://secpub.1515.mtvi.com/    
 * Goto btg.mtvnservices.com
 * Listname: laorg
 * Test Only: No
 * Click Go

 4. Publish tool which moves the Coda config from QA to Prod.
  * http://btg.mtvnservices-q.mtvi.com/tools/pubtool/
  * click publish
  * Create new list


# Testing
 *Live:  http://btg.mtvnservices.com/aria/coda.html?site=mtv.com
 * Staging: http://btg.mtvnservices.com/aria/coda.html?site=tvland.com&stage=1

———————————————————————————————————————————————————————————————————————————————— 
# Jenkins: 
 * http://hudson.mtvi.com/hudson/
 * http://confluence.mtvi.com/display/MAB/Build+Environment+Software+Matrix
 * choose BTG

iOS Job:

Stash repo:  
Repository URL:    ssh://git@stash.mtvi.com/btg/bento-ios.git
Credentials: hudson (user for master node (.ssh))
Branch specifier: */feature/BTGREPGEN-4835

#!/bin/bash -l
curl http://mobileapps-pipeline.s3-website-us-east-1.amazonaws.com/ios/latest/installer | bash
bundle exec rake pipeline:modifyPlist KEY="CFBundleIdentifier" VALUE="com.mtvn.BentoTestRig"

# To build a regular Xcode project (without CocoaPods), uncomment the following
bundle exec rake pipeline:build SCHEME="BentoTestRig" WORKSPACE_NAME="BentoTestRig" PROJECT_DIR="testrig" XCODE_VERSION="XCode6" DEVELOPMENT_IDENTITY="iPhone Distribution: MTV Networks Company" DEVELOPMENT_PROFILE="Team2_InHouse" SIMULATOR_BUILD=true


———————————————————————————————————————————————————————————————————————————————— 
Maven:

# Setup:
# Download URL: http://maven.apache.org/download.cgi
$ cd /usr/local
$ sudo mv /Users/pankaj/Downloads/apache-maven-3.0.5-bin.tar.gz ./
$ sudo tar -xvf apache-maven-3.0.3-bin.tar.gz

* $ cd $HOME
$ vi .bash_profile
#Add below lines in the profile
export M2_HOME=/usr/local/apache-maven-3.0.5
export PATH=$PATH:$M2_HOME/bin
#save and quit
$source ~/.bash_profile

Maven build:
# Cleans and create a build on local target:mvn clean package
# Cleans and create a build on .m2 folder: mvn clean install
# Cleans and create a build and deploy to NEXUS: mvn clean deploy

———————————————————————————————————————————————————————————————————————————————— 
Charles:

# Proxy settings in android emulator and other devices: 
   http://www.charlesproxy.com/documentation/configuration/browser-and-system-configuration/

———————————————————————————————————————————————————————————————————————————————— 
Bento Android:

# Setup:
# Use Android Studio
# export ANDROID_HOME=/Applications/Android\ Studio.app/sdk/
# Do Maven setup
# In android studio project will be :Bento-Android" and its modules will be "Bento-Android-Lib" and "Bento-Android-Test-Rig"
# use Maven  (no gradle at present)
# Emulator command line option for charles: -http-proxy http://192.168.1.11:8888
# Right  now only maven 3.0.3 is working
# AdContainerMraid.html is used for integration with Coda. (AdContainer.html is not used)
# For display ads Doubleclick DART is used, this is going to sunset. Later Doubleclick DFP will be used.
# Android source codes: (github)
  * Bento-Android-Lib-TestRig
 * Bento-Android-Lib
 * 
# Jenkins Job:
 * Clone jenkins job BentoAndroidLib
 * Branches to build: origin/BTGREPGEN-3478
 * 
# Android device screen sharing: http://droid-at-screen.ribomation.com/download/
# Run Droid at screen  
 * cd /Users/subramak/Projects/WORK
 * java -jar droidAtScreen-1.1.jar 

———————————————————————————————————————————————————————————————————————————————— 
MTV Android:

 * Github source can be found here: https://github.com/mtvn-player/mtvx-android
 * Mtv skin can be found here: https://github.com/mtvn-player/mtvx-android-mtv

———————————————————————————————————————————————————————————————————————————————— 
HTML Player:

# Source Code
 *Bento Javascript Library: https://github.com/mtvn-player/Bento-JavaScript-Lib
   1. mvm clean install

 *Html5 Player:  https://github.com/mtvn-player/html5-player
   1. mvn gwt-compile
# install bower  (has dependency on NodeJs and Npm): npm install -g bower
# install grunt (javascript task runner): npm install -g grunt-cli
# cd to project folder and $bower install
# html5 player test rig will not work in firefox and IE. Will work on Chrome and Safari
# test rig: localhost:8881/qa/html5mediaplayer/index.php
# To test network sites (cc.com, mtv.com) : Map local html5player folder to http://media.mtvnservices.com/player/html5/gwtversions/1.32.5/mediaplayer/

———————————————————————————————————————————————————————————————————————————————— 
Bower:

# Installing bower - http://bower.io
 * Install Node.js and Npm : http://nodejs.org
 * echo prefix = ~/.node >> ~/.npmrc
 * export PATH="$PATH:$HOME/npm/bin" to your ~/.bashrc
 * npm install -g bower
 
———————————————————————————————————————————————————————————————————————————————— 
Grunt:

# Installing grunt
 * npm install -g grunt-cli
 * add to .bash_profile: /Users/subramak/.node/lib/node_modules/grunt-cli/bin
 * grunt —version
 
———————————————————————————————————————————————————————————————————————————————— 
Github:

$ git status
$ git pull
$ git reset - -hard orgin/master   (note: two dashes without space)
$ git checkout feature/Bento-mediator-nielsen
$ git checkout tags/<tag_name>

#  Github : always create branch from development

# Workflow: https://s3.amazonaws.com/uploads.hipchat.com/22279/494972/grw9TzCZA2dsUcN/upload.png

# Git default User:
git config --global user.email "kums600@gmail.com"
git config --global user.name "Kumaran Subramanian"

# Make a bare clone of the repository
 $ git clone --mirror https://github.com/NickMobile/nick.git
 $ cd TestRepo.git
 $ git push --mirror https://github.com/mtvn-player/Bento-nick-iOS.git
 $ cd ..
 $ rm -rf nick.git

———————————————————————————————————————————————————————————————————————————————— 
PHP:
 
 * https://subversion.1515.mtvi.com/phpsites/platform/btg.mtvnservices.com/trunk/ARCS/
 * https://subversion.1515.mtvi.com/phpsites/platform/btg.mtvnservices.com/trunk/rest/
 * https://subversion.1515.mtvi.com/phpsites/platform/btg.mtvnservices.com/trunk/coda.html
 * DB Credentials: Info/BUSTECH-BTGEnvironmentInfo-221014-1248-108.pdf

———————————————————————————————————————————————————————————————————————————————— 
SQL:

* SELECT T3.DomainName, T1.DataType, T2.DataValue FROM domains T3, btg_mtvnsvcs.metadata_data_types T1, btg_mtvnsvcs.domains_metadata T2
where T1.DataTypeID = T2.DataTypeID
and T3.DomainID = T2.DomainID
and T3.DomainID in (35 )
and T1.DataTypeID in ( 5)

———————————————————————————————————————————————————————————————————————————————— 
iOS Release:
1. Create a branch release/1.5.5  (Make sure all the changes are here)

2. Merge all the branches to release/1.5.5

3. Merge release/1.5.5 to develop

4. Merge release/1.5.5 to master

5. Create a release from master 

6. Modify Specs/Bento-iOS-Lib
   * Create folder called 1.5.5 and copy file from earlier version (1.5.4)
     Modify 	s.version = ‘1.5.5’
		:branch => "release/#{s.version}"
		:tag => "#{s.version}"   
7. Test rig can be used to test the release: http://hudson.mtvi.com/hudson/view/BTG/job/Bento_iOS_TestRig_release 
                     
———————————————————————————————————————————————————————————————————————————————— 
Bento JS
 * https://confluence.mtvi.com/display/BUSTECH/Bento+JS+-+Project+Set+Up
 1. Install node.js : http://nodejs.org/
 2. Install phantomjs :  http://phantomjs.org/download.html
 3. Installing gulp : http://blog.webbb.be/command-not-found-node-npm/
    [if we face problem with gulp -v]
    $ npm config set prefix /usr/local
   $ npm root -g 
   $ npm install -g gulp  (if there is a problem install as sudo) 
    $ gulp -v
 4. Install sourcetree
     * point to stash: https://stash.mtvi.com/scm/btg
 5.  

———————————————————————————————————————————————————————————————————————————————— 
Nexus:

Bento Android:
http://nexus.mtvi.com/nexus/content/repositories/public/com/vmn/android/bento-android/2.0.0-rc.3/

———————————————————————————————————————————————————————————————————————————————— 

